service: showgoat

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-cloudfront-lambda-edge
  - serverless-cloudformation-changesets

custom:
  stage: ${opt:stage, '${file(../../local.yml):stage, 'dev'}'}
  prefix: ${self:custom.stage}-${self:service}

provider:
  name: aws
  region: us-east-1
  stage: ${self:custom.stage}
  runtime: nodejs8.10
  timeout: 5
  memorySize: 512
  environment:
    AWS_RESOURCE_PREFIX: ${self:custom.prefix}
  iamRoleStatements:
    - Effect: Allow
      Action: S3:*
      Resource: arn:aws:s3:::${self:custom.prefix}-*

package:
  individually: true

functions:

  scrape:
    handler: src/lambda/scrape.scrape
    events:
      - schedule: rate(1 hour)

  apiStatus:
    handler: src/lambda/apiStatus.getStatus
    events:
      - http: GET /status

  apiGetShows:
    handler: src/lambda/apiShows.getShows
    events:
      - http: GET /shows

  apiGetLiveParse:
    handler: src/lambda/apiDebug.getLiveParse
    events:
      - http: GET /debug/live-parse

  apiGetLivePartials:
    handler: src/lambda/apiDebug.getLivePartials
    events:
      - http: GET /debug/live-partials

  onViewerRequest:
    handler: src/lambda/edge.onViewerRequest
    timeout: 1
    memorySize: 128
    lambdaAtEdge:
      distribution: CloudFrontDistribution
      eventType: viewer-request

  onOriginResponse:
    handler: src/lambda/edge.onOriginResponse
    timeout: 1
    memorySize: 128
    lambdaAtEdge:
      distribution: CloudFrontDistribution
      eventType: origin-response

  onOriginRequest:
    handler: src/lambda/edge.onOriginRequest
    timeout: 1
    memorySize: 128
    lambdaAtEdge:
      distribution: CloudFrontDistribution
      eventType: origin-request

resources:
  Description: ${self:service} - ${self:custom.stage}

  Conditions:
    IsProd:
      Fn::Equals:
        - ${self:custom.stage}
        - prod

  Resources:

    # shared object storage

    ContentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.prefix}-content

    # circle CI user

    CircleCIDeploymentUser:
      Type: AWS::IAM::User
      Properties:
        Path: /${self:custom.prefix}/circle-ci/
        Policies:
          - PolicyName: inline-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:

                - Effect: Allow
                  Action: S3:ListBucket
                  Resource: '*'

                - Effect: Allow
                  Action: S3:*
                  Resource:
                    - arn:aws:s3:::${self:custom.prefix}-*
                    - Fn::Join:
                      - ''
                      - - { Fn::GetAtt: 'ServerlessDeploymentBucket.Arn' }
                        - '*'

                - Effect: Allow
                  Action: CloudFormation:CreateChangeSet
                  Resource: '*'
                - Effect: Allow
                  Action: CloudFormation:DescribeStacks
                  Resource: '*'
                - Effect: Allow
                  Action: CloudFormation:DescribeStackResources
                  Resource: '*'
                - Effect: Allow
                  Action: CloudFormation:DescribeStackResource
                  Resource: '*'
                - Effect: Allow
                  Action: CloudFormation:ValidateTemplate
                  Resource: '*'

    # OAI for CloudFront to see into the ContentBucket

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Condition: IsProd
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${self:service} - ${self:custom.stage}

    # Policy granting the OAI access

    ContentBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Condition: IsProd
      Properties:
        Bucket: { Ref: ContentBucket }
        PolicyDocument:
          Version: '2012-10-17'
          Id: CloudfrontAccess
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser: { Fn::GetAtt: CloudFrontOriginAccessIdentity.S3CanonicalUserId }
              Action: S3:GetObject
              Resource:
                Fn::Join:
                  - ''
                  - [ { Fn::GetAtt: ContentBucket.Arn }, '/public/*' ]

    # the CF distribution for all static content

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Condition: IsProd
      Properties:
        DistributionConfig:
          Aliases:
            - 'showgoat.net'
            - 'www.showgoat.net'
          DefaultCacheBehavior:
            Compress: true
            ForwardedValues:
              QueryString: false
            TargetOriginId: s3-content-bucket
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          ViewerCertificate:
            AcmCertificateArn: { Ref: SSLCert }
            SslSupportMethod: sni-only
          Origins:
            - Id: s3-content-bucket
              DomainName: { Fn::GetAtt: ContentBucket.DomainName }
              OriginPath: /public/web-client
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - 'origin-access-identity/cloudfront/'
                      - { Ref: CloudFrontOriginAccessIdentity }

    # https

    SSLCert:
      Type: AWS::CertificateManager::Certificate
      Condition: IsProd
      Properties:
        DomainName: showgoat.net
        ValidationMethod: DNS
        SubjectAlternativeNames:
          - '*.showgoat.net'

    # custom domain for api gateway

    APIDomainName:
      Type: AWS::ApiGateway::DomainName
      Condition: IsProd
      Properties:
        CertificateArn: { Ref: SSLCert }
        DomainName: api.showgoat.net

    # api gateway basepath mapping

    APIMapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn: APIDomainName
      Condition: IsProd
      Properties:
        DomainName: api.showgoat.net
        RestApiId: { Ref: ApiGatewayRestApi } # created from serverless
        Stage: ${self:custom.stage}

    # all dns entries

    Route53DNSEntry:
      Type: AWS::Route53::RecordSetGroup
      Condition: IsProd
      Properties:
        HostedZoneName: showgoat.net.
        RecordSets:
          - Name: showgoat.net
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2 # cloudfront
              DNSName: { Fn::GetAtt: CloudFrontDistribution.DomainName }
          - Name: www.showgoat.net
            Type: CNAME
            TTL: 300
            ResourceRecords:
              - showgoat.net
          - Name: status.showgoat.net
            Type: CNAME
            TTL: 300
            ResourceRecords:
              - stats.uptimerobot.com
          - Name: api.showgoat.net
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2 # cloudfront
              DNSName: { Fn::GetAtt: APIDomainName.DistributionDomainName }
